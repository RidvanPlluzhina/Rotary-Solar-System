
int rotaryPin = 2; // Pin D2 where the rotary part of the phone is connected
int buttonC = 7;   // Button C connected to D7
int buttonD = 6;   // Button D connected to D6
int buzzer = 8;    // Buzzer connected to D8
int frequency1 = 400; // Buzzer frequency 1
int frequency2 = 450; // Buzzer frequency 2

int pulseCount = 0; // Used for tracking the number of pulses generated by rotary dial
bool dialing = false; // Indicates if a number is currently being dialed
unsigned long lastPulseTime = 0; // Tracks the time of the last pulse to detect when dialing is complete

void setup() {
  pinMode(rotaryPin, INPUT_PULLUP); 
  pinMode(buttonC, INPUT);
  pinMode(buttonD, INPUT);
  pinMode(buzzer, OUTPUT);

  Serial.begin(9600); 
  Serial.println("Setup complete. Dial a number...");
}

void loop() {
  // Read rotary dial state
  int rotaryState = digitalRead(rotaryPin);
  // Start the call button
  if (digitalRead(7) == HIGH) {
        Serial.println("LaunchRocket");
        delay(200); // Debounce delay
    }
  // Stop the call button
  if (digitalRead(6) == LOW) {
        Serial.println("StopEverything");
        delay(200); // Debounce delay
    }
  if (rotaryState == LOW) {
    pulseCount++; // Increment pulse count on pulse
    lastPulseTime = millis(); // Record time of last pulse
    dialing = true; // Mark as dialing
  }

  if (dialing && millis() - lastPulseTime > 700) {
    int dialedNumber = -1; // Initialize with an invalid value

    // Map pulseCount ranges to dialed numbers
    if (pulseCount >= 10 && pulseCount <= 12) { 
      dialedNumber = 1; 
    } else if (pulseCount >= 13 && pulseCount <= 15) { 
      dialedNumber = 2; 
    } else if (pulseCount >= 16 && pulseCount <= 18) { 
      dialedNumber = 3; 
    } else if (pulseCount >= 19 && pulseCount <= 21) { 
      dialedNumber = 4; 
    } else if (pulseCount >= 22 && pulseCount <= 24) { 
      dialedNumber = 5; 
    } else if (pulseCount >= 25 && pulseCount <= 27) { 
      dialedNumber = 6; 
    } else if (pulseCount >= 28 && pulseCount <= 30) { 
      dialedNumber = 7; 
    } else if (pulseCount >= 31 && pulseCount <= 33) { 
      dialedNumber = 8; 
    } else if (pulseCount >= 34 && pulseCount <= 36) { 
      dialedNumber = 9; 
    } else if (pulseCount >= 37) { 
      dialedNumber = 0; 
    }

    // Print the detected number if valid
    if (dialedNumber != -1) {
    Serial.print("You have dialed: ");
    Serial.println(dialedNumber);

    // Add actions for each number
    if (dialedNumber == 0) {
        Serial.println("RotateEarth"); // Message for Unity
    } else if (dialedNumber == 1) {
        Serial.println("RotateMars"); // Message for Unity
    } else if (dialedNumber == 2) {
        Serial.println("RotateSun"); // Message for Unity
    } else if (dialedNumber == 3) {
        Serial.println("RotateMercury"); // Message for Unity
    } else if (dialedNumber == 4) {
        Serial.println("RotateVenus"); // Message for Unity
    } else if (dialedNumber == 5) {
        Serial.println("RotateJupiter"); // Message for Unity
    } else if (dialedNumber == 6) {
        Serial.println("RotateSaturn"); // Message for Unity
    } else if (dialedNumber == 7) {
        Serial.println("RotateUranus"); // Message for Unity
    } else if (dialedNumber == 8) {
        Serial.println("RotateNeptune"); // Message for Unity
    } else if (dialedNumber == 9) {
        Serial.println("RotateMoon"); // Message for Unity
    } else {
        Serial.println("Error: Invalid pulse count!");
    }

    // Reset counters for the next dial
    pulseCount = 0; 
    dialing = false; 
  }
}

  // Check Button C and play a ringing sound
  if (digitalRead(buttonC) == HIGH) {
    playRingingSound();
  }

  // Check Button D and stop the buzzer
  if (digitalRead(buttonD) == HIGH) {
    noTone(buzzer);
  }

  delay(50); // Small delay for stability
}

void playRingingSound() {
  for (int i = 0; i < 10; i++) { 
    if (digitalRead(buttonD) == HIGH) {
      noTone(buzzer);
      return;
    }
    tone(buzzer, frequency1);
    delay(400);
    if (digitalRead(buttonD) == HIGH) {
      noTone(buzzer);
      return;
    }
    tone(buzzer, frequency2);
    delay(400);
    noTone(buzzer);
    delay(200);
  }
}
